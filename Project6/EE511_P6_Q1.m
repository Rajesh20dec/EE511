function Proj6_Q1()
clc;
clear all;
time_Box=[];
time_Polor=[];
Thoeretical_Mean_A=3;
Thoeretical_variance_A=13;

%----------Below code is for Box Muller---------
[A,x,y]=Generate_Random_Sample_Using_Box_Muller(1000,1);
Mean_of_A=mean(A);
Var_Of_A=var(A);
Sample_mean_X=mean(x);
Sample_mean_Y=mean(y);
Variance_X=var(x);
Variance_Y=var(y);
Covariace_XY=cov(x,y);
sprintf('----------Below print is for Box Muller--------')
sprintf('estimated mean A =%f and theoretical mean of A=%f',Mean_of_A,Thoeretical_Mean_A)
sprintf('estimated variance A =%f and theoretical variance of A=%f',Var_Of_A,Thoeretical_variance_A)
sprintf('sample mean of X random variable =%f',Sample_mean_X)
sprintf('sample mean of Y random variable =%f',Sample_mean_Y)
sprintf('Variance of X random Variable=%f',Variance_X)
sprintf('Variance of Y random Variable=%f',Variance_Y)
sprintf('Covariance of X and Y is =%f',Covariace_XY(1,2))
figure(1)
yyaxis left
hist(A,20);
%h.Color = 'red';
title('Random Variable A (Using Box Muller) overlay with Pdf') 
xlabel('Value of Random variable A')
ylabel('Frequency')
yyaxis right
t=-50:0.1:50;
temp=normpdf(t,3,13);
plot(t,temp);
ylabel('Normal PDF');
legend({'Hist of A','Theoretical PDF of Norma Distribution'},'FontSize',8)


%----------Below code is for Polar Marsaglia--------'
[A,x,y]=Generate_Random_Samples_Using_Polar_Marsaglia(1000000,1);
Mean_of_A=mean(A);
Var_Of_A=var(A);
Sample_mean_X=mean(x);
Sample_mean_Y=mean(y);
Variance_X=var(x);
Variance_Y=var(y);
Covariace_XY=cov(x,y);
sprintf('----------Below print is for Polar Marsaglia--------')
sprintf('estimated mean A =%f and theoretical mean of A=%f',Mean_of_A,Thoeretical_Mean_A)
sprintf('estimated variance A =%f and theoretical variance of A=%f',Var_Of_A,Thoeretical_variance_A)
sprintf('sample mean of X random variable =%f',Sample_mean_X)
sprintf('sample mean of Y random variable =%f',Sample_mean_Y)
sprintf('Variance of X random Variable=%f',Variance_X)
sprintf('Variance of Y random Variable=%f',Variance_Y)
sprintf('Covariance of X and Y is =%f',Covariace_XY(1,2))
figure(2)
yyaxis left
hist(A,20);
%h.Color = 'red';
title('Random Variable A (Using Polar Marsaglia) overlay with Pdf') 
xlabel('Value of Random variable A')
ylabel('Frequency')
yyaxis right
t=-50:0.1:50;
temp=normpdf(t,3,13);
plot(t,temp);
ylabel('Normal PDF');
legend({'Hist of A','Theoretical PDF of Norma Distribution'},'FontSize',8)

%---------Below code is for comparision  of speed between Box Muller Polar Marsaglia
[A,x,y,time_Box]=Generate_Random_Sample_Using_Box_Muller(1000000,10);
[A,x,y,time_Polar]=Generate_Random_Samples_Using_Polar_Marsaglia(1000000,10);
sprintf('Time taken by using Box_Muller to generate 1 million samples in 10 experiments are')
disp(time_Box)
sprintf('Time taken by using Polar_Marsaglia to generate 1 million samples in 10 experiments are')
disp(time_Polar)

end

%------------------------------------------------------------------%
%Funtion name:Generate_Random_Sample_Using_Box_Muller()
%Input parameters:No_Of_Samples,No_Experiment
%Output Parameters:x,y,Time_elasped
%Defination:This function generates  samples of X and Y Random Normal  
% variables using Box Muller methods and Return the Samples and Time 
%taken to genrates these Samples.
%--------------------------------------------------------------------%


function[A,x,y,Time_elasped]= Generate_Random_Sample_Using_Box_Muller(No_Of_Samples,No_Experiment)



Time_elasped=zeros(1,No_Experiment);
Mean_X = 1; % Mean of X
Mean_Y = 2; % Mean of Y
Variance_X = 4; % Variance of X
Variance_Y = 9; % Variance of Y
for i=1:No_Experiment
    tic;% Start the timer
    u1 = rand(No_Of_Samples,1);
    u2 = rand(No_Of_Samples,1);

    % Geberate X and Y that are N(0,1) random variables and independent
    X = sqrt( - 2*log(u1)).*cos(2*pi*u2 ); 
    Y = sqrt( - 2*log(u1)).*sin(2*pi*u2 );

    % Scale them to a particular mean and variance 
    x = sqrt(Variance_X)*X + Mean_X; % x~ N(M1,V1)
    y = sqrt(Variance_Y)*Y + Mean_Y; % y~ N(M2,V2)
    

    Time_elasped(i)=toc; % Read elapsed time from stopwatch
    A=x+y;
end




end

%------------------------------------------------------------------%
%Funtion name:Generate_Random_Samples_Using_Polar_Marsaglia()
%Input parameters:No_Of_Samples,No_Experiment
%Output Parameters:x,y,Time_elasped
%Defination:This function generates  samples of X and Y Random Normal  
% variables using Polar Marsaglia methods and Return the Samples and Time 
%taken to genrates these Samples.
%--------------------------------------------------------------------%

function[A,x,y,Time_elasped]= Generate_Random_Samples_Using_Polar_Marsaglia(No_of_Samples,No_Experiment)


Time_elasped=zeros(1,No_Experiment);
M1 = 1; % Mean of X
M2 = 2; % Mean of Y
V1 = 4; % Variance of X
V2 = 9; % Variance of Y
i = 0; % the random number generated by the algorithm 
%No_of_Samples=1000000;

% Geberate X and Y that are N(0,1) random variables and independent
for j=1:No_Experiment
    tic;% Start the timer
    while(i<=No_of_Samples)
        u1 = 2*rand()-1;
        u2 = 2*rand()-1;
        s = u1^2 + u2^2;
        if(s < 1)
            i = i + 1;
            X(i) = sqrt(-2*log(s)/s)*u1;
            Y(i) = sqrt(-2*log(s)/s)*u2;
        end
    end

    % Scale them to a particular mean and variance 
    x = sqrt(V1)*X + M1; % x~ N(M1,V1)
    y = sqrt(V2)*Y + M2; % y~ N(M2,V2)
    

Time_elasped(j)=toc;% Read elapsed time from stopwatch
A=x+y;
end

end